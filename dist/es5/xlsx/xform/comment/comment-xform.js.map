{"version":3,"sources":["../../../../../lib/xlsx/xform/comment/comment-xform.js"],"names":["RichTextXform","require","utils","BaseXform","CommentXform","module","exports","model","inherits","tag","richTextXform","_richTextXform","render","xmlStream","openNode","ref","texts","forEach","text","closeNode","parseOpen","node","parser","name","attributes","parseText","parseClose","push","undefined"],"mappings":";;;;;;AAAA,IAAMA,aAAa,GAAGC,OAAO,CAAC,4BAAD,CAA7B;;AACA,IAAMC,KAAK,GAAGD,OAAO,CAAC,sBAAD,CAArB;;AACA,IAAME,SAAS,GAAGF,OAAO,CAAC,eAAD,CAAzB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,IAAMG,YAAY,GAAIC,MAAM,CAACC,OAAP,GAAiB,UAASC,KAAT,EAAgB;AACrD,OAAKA,KAAL,GAAaA,KAAb;AACD,CAFD;;AAIAL,KAAK,CAACM,QAAN,CAAeJ,YAAf,EAA6BD,SAA7B,EAAwC;AACtC,MAAIM,GAAJ,GAAU;AACR,WAAO,GAAP;AACD,GAHqC;;AAKtC,MAAIC,aAAJ,GAAoB;AAClB,QAAI,CAAC,KAAKC,cAAV,EAA0B;AACxB,WAAKA,cAAL,GAAsB,IAAIX,aAAJ,EAAtB;AACD;;AACD,WAAO,KAAKW,cAAZ;AACD,GAVqC;;AAYtCC,EAAAA,MAZsC,kBAY/BC,SAZ+B,EAYpBN,KAZoB,EAYb;AAAA;;AACvBA,IAAAA,KAAK,GAAGA,KAAK,IAAI,KAAKA,KAAtB;AAEAM,IAAAA,SAAS,CAACC,QAAV,CAAmB,SAAnB,EAA8B;AAC5BC,MAAAA,GAAG,EAAER,KAAK,CAACQ;AADiB,KAA9B;AAGAF,IAAAA,SAAS,CAACC,QAAV,CAAmB,MAAnB;;AACA,QAAIP,KAAK,CAACS,KAAV,EAAiB;AACfT,MAAAA,KAAK,CAACS,KAAN,CAAYC,OAAZ,CAAoB,UAAAC,IAAI,EAAI;AAC1B,QAAA,KAAI,CAACR,aAAL,CAAmBE,MAAnB,CAA0BC,SAA1B,EAAqCK,IAArC;AACD,OAFD;AAGD;;AACDL,IAAAA,SAAS,CAACM,SAAV;AACAN,IAAAA,SAAS,CAACM,SAAV;AACD,GA1BqC;AA4BtCC,EAAAA,SA5BsC,qBA4B5BC,IA5B4B,EA4BtB;AACd,QAAI,KAAKC,MAAT,EAAiB;AACf,WAAKA,MAAL,CAAYF,SAAZ,CAAsBC,IAAtB;AACA,aAAO,IAAP;AACD;;AACD,YAAQA,IAAI,CAACE,IAAb;AACE,WAAK,SAAL;AACE,aAAKhB,KAAL;AACES,UAAAA,KAAK,EAAE;AADT,WAEKK,IAAI,CAACG,UAFV;AAIA,eAAO,IAAP;;AACF,WAAK,GAAL;AACE,aAAKF,MAAL,GAAc,KAAKZ,aAAnB;AACA,aAAKY,MAAL,CAAYF,SAAZ,CAAsBC,IAAtB;AACA,eAAO,IAAP;;AACF;AACE,eAAO,KAAP;AAZJ;AAcD,GA/CqC;AAgDtCI,EAAAA,SAhDsC,qBAgD5BP,IAhD4B,EAgDtB;AACd,QAAI,KAAKI,MAAT,EAAiB;AACf,WAAKA,MAAL,CAAYG,SAAZ,CAAsBP,IAAtB;AACD;AACF,GApDqC;AAqDtCQ,EAAAA,UArDsC,sBAqD3BH,IArD2B,EAqDrB;AACf,YAAQA,IAAR;AACE,WAAK,SAAL;AACE,eAAO,KAAP;;AACF,WAAK,GAAL;AACE,aAAKhB,KAAL,CAAWS,KAAX,CAAiBW,IAAjB,CAAsB,KAAKL,MAAL,CAAYf,KAAlC;AACA,aAAKe,MAAL,GAAcM,SAAd;AACA,eAAO,IAAP;;AACF;AACE,YAAI,KAAKN,MAAT,EAAiB;AACf,eAAKA,MAAL,CAAYI,UAAZ,CAAuBH,IAAvB;AACD;;AACD,eAAO,IAAP;AAXJ;AAaD;AAnEqC,CAAxC","sourcesContent":["const RichTextXform = require('../strings/rich-text-xform');\nconst utils = require('../../../utils/utils');\nconst BaseXform = require('../base-xform');\n\n/**\n  <comment ref=\"B1\" authorId=\"0\">\n    <text>\n      <r>\n        <rPr>\n          <b/>\n          <sz val=\"9\"/>\n          <rFont val=\"宋体\"/>\n          <charset val=\"134\"/>\n        </rPr>\n        <t>51422:</t>\n      </r>\n      <r>\n        <rPr>\n          <sz val=\"9\"/>\n          <rFont val=\"宋体\"/>\n          <charset val=\"134\"/>\n        </rPr>\n        <t xml:space=\"preserve\">&#10;test</t>\n      </r>\n    </text>\n  </comment>\n */\n\nconst CommentXform = (module.exports = function(model) {\n  this.model = model;\n});\n\nutils.inherits(CommentXform, BaseXform, {\n  get tag() {\n    return 'r';\n  },\n\n  get richTextXform() {\n    if (!this._richTextXform) {\n      this._richTextXform = new RichTextXform();\n    }\n    return this._richTextXform;\n  },\n\n  render(xmlStream, model) {\n    model = model || this.model;\n\n    xmlStream.openNode('comment', {\n      ref: model.ref,\n    });\n    xmlStream.openNode('text');\n    if (model.texts) {\n      model.texts.forEach(text => {\n        this.richTextXform.render(xmlStream, text);\n      });\n    }\n    xmlStream.closeNode();\n    xmlStream.closeNode();\n  },\n\n  parseOpen(node) {\n    if (this.parser) {\n      this.parser.parseOpen(node);\n      return true;\n    }\n    switch (node.name) {\n      case 'comment':\n        this.model = {\n          texts: [],\n          ...node.attributes,\n        };\n        return true;\n      case 'r':\n        this.parser = this.richTextXform;\n        this.parser.parseOpen(node);\n        return true;\n      default:\n        return false;\n    }\n  },\n  parseText(text) {\n    if (this.parser) {\n      this.parser.parseText(text);\n    }\n  },\n  parseClose(name) {\n    switch (name) {\n      case 'comment':\n        return false;\n      case 'r':\n        this.model.texts.push(this.parser.model);\n        this.parser = undefined;\n        return true;\n      default:\n        if (this.parser) {\n          this.parser.parseClose(name);\n        }\n        return true;\n    }\n  },\n});\n"],"file":"comment-xform.js"}